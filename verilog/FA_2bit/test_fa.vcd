$date
	Fri Oct 18 18:00:26 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 2 ! z [1:0] $end
$var wire 1 " rout $end
$var reg 2 # a [1:0] $end
$var reg 2 $ b [1:0] $end
$var reg 1 % rin $end
$var integer 32 & i [31:0] $end
$scope module adder $end
$var wire 2 ' a [1:0] $end
$var wire 2 ( b [1:0] $end
$var wire 1 % rin $end
$var wire 2 ) z [1:0] $end
$var wire 1 " rout $end
$var wire 1 * rips $end
$scope module FA0 $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 % rin $end
$var wire 1 * rout $end
$var wire 1 - z $end
$upscope $end
$scope module FA1 $end
$var wire 1 . a $end
$var wire 1 / b $end
$var wire 1 * rin $end
$var wire 1 " rout $end
$var wire 1 0 z $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
00
0/
0.
0-
0,
0+
0*
b0 )
b0 (
b0 '
bx &
0%
b0 $
b0 #
0"
b0 !
$end
#1
b0 &
#4
b1 &
#6
b1 !
b1 )
1-
1%
#7
b10 &
#9
b1 !
b1 )
1-
1,
b1 $
b1 (
0%
#10
b11 &
#12
10
b10 !
b10 )
0-
1*
1%
#13
b100 &
#15
0"
b10 !
b10 )
0-
0*
0,
1/
b10 $
b10 (
0%
#16
b101 &
#18
b11 !
b11 )
1-
1%
#19
b110 &
#21
b11 !
b11 )
1-
1,
b11 $
b11 (
0%
#22
b111 &
#24
00
1"
b0 !
b0 )
0-
1*
1%
#25
b1000 &
